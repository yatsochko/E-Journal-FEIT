<?phpclass Router{    private  $routes;    public function __construct()    {        $routesPath = ROOT . '/config/routes.php';        $this->routes = include($routesPath);    }    /*     * Returns request string.     */    private function getUTI()    {        if(!empty($_SERVER['REQUEST_URI'])) {            return trim($_SERVER['REQUEST_URI'], '/');        }    }    public function run()    {        // 1. Получить строку запроса        $uri = $this->getUTI();        // 2. Проверить наличие такого запроса в routes.php        foreach ($this->routes as $uriPattern => $path) {            //  3. Сравниваем $uriPattern и $uri            if (preg_match("~$uriPattern~", $uri)) {                // 4. Если есть совпадение, определить какой контроллер                // и action обрабатывают запрос//                echo '<br>Где ищем (запрос, который набрал пользователь): '.$uri;//                echo '<br>Что ищем (совпадение из правила): '.$uriPattern;//                echo '<br>Где ищем (кто обрабатывает): '.$path;                // Получаем внутренний путь из внешнего согласно правилу.                $internalRoute = preg_replace("~$uriPattern~", $path, $uri);//                echo '<br><br>Нужно сформировать: '.$internalRoute.'<br><br>';                // Теперь можем определить контроллер, action, параметры                $segments = explode('/', $internalRoute);                $controllerName = array_shift($segments).'Controller';                $controllerName = ucfirst($controllerName); // Делает первую букву строки заглавной                $actionName = 'action'.ucfirst(array_shift($segments));                $parameters = $segments; // Остатки в массиве это параметры, передадим их в action                // 5. Подключить файл класса-контроллера                $controllerFile = ROOT . '/controllers/'. $controllerName . '.php';                if (file_exists($controllerFile)){                    include_once($controllerFile);                }                // 6. Создать объект, вызвать метод (т.е. action)                $controllerObject = new $controllerName; // Создаем объект класса нужного контроллера//                $result = $controllerObject->$actionName($parameters);                // В данном случае параметры из масива будут передаватся как переменные                $result = call_user_func_array(array($controllerObject, $actionName), $parameters);                if ($result != null) {                    break;                }            }        }    }}